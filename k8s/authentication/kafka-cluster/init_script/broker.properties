# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################# Server Basics #############################

# The role of this server. Setting this puts us in KRaft mode
# Must be |process.roles=broker|
process.roles={{KAFKA_PROCESS_ROLES}}

# The node id associated with this instance's roles
node.id={{KAFKA_NODE_ID}}

# Information about the KRaft controller quorum.
controller.quorum.bootstrap.servers={{KAFKA_CONTROLLER_QUORUM_BOOTSTRAP_SERVERS}}

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners={{KAFKA_LISTENERS}}

# Name of listener used for communication between brokers.
inter.broker.listener.name=PLAINTEXT

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
advertised.listeners={{KAFKA_ADVERTISED_LISTENERS}}

# A comma-separated list of the names of the listeners used by the controller.
# This is required if running in KRaft mode. On a node with `process.roles=broker`, only the first listed listener will be used by the broker.
controller.listener.names={{KAFKA_CONTROLLER_LISTENER_NAMES}}

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads={{KAFKA_NUM_NETWORK_THREADS}}

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads={{KAFKA_NUM_IO_THREADS}}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{KAFKA_SOCKET_SEND_BUFFER_BYTES}}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{KAFKA_RECIEVE_BUFFER_BYTES}}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{KAFKA_REQUEST_MAX_BYTES}}


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{KAFKA_LOG_DIR}}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{KAFKA_NUM_PARTITIONS}}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{KAFKA_RECOVERY_THREADS_PER_DATA_DIR}}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor={{KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}}
transaction.state.log.replication.factor={{KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}}
transaction.state.log.min.isr={{KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}}

# Share state topic settings
share.coordinator.state.topic.replication.factor={{KAFKA_SHARE_COORDINATOR_STATE_TOPIC_REPLICATION_FACTOR}}
share.coordinator.state.topic.min.isr={{KAFKA_SHARE_COORDINATOR_STATE_TOPIC_MIN_ISR}}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{KAFKA_RETENTION_HOURS}}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{KAFKA_LOG_SEGMENT_BYTES}}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{KAFKA_RETENTION_CHECK_INTERVAL_MS}}
